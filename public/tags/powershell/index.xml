<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PowerShell on Howdy,Kloudy!</title>
    <link>/tags/powershell/</link>
    <description>Recent content in PowerShell on Howdy,Kloudy!</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 07 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementing Shift Left FinOps with Terraform: A Comprehensive Guide</title>
      <link>/blog/implementing-shift-left-finops-with-terraform-a-comprehensive-guide/</link>
      <pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>/blog/implementing-shift-left-finops-with-terraform-a-comprehensive-guide/</guid>
      <description>Introduction As organizations strive to enhance their cloud infrastructure management, Shift Left and FinOps concepts have gained significant traction. Shift Left emphasizes integrating various aspects of the software development lifecycle earlier, identifying and resolving issues sooner. FinOps, on the other hand, focuses on the financial management of cloud services, ensuring cost efficiency and transparency.
Combining these two practices, Shift Left FinOps aims to incorporate financial considerations into the development and deployment stages, allowing teams to predict and optimize costs proactively.</description>
    </item>
    
    <item>
      <title>Implementing Shift Left for Terraform: An Introductory Guide</title>
      <link>/blog/implementing-shift-left-for-terraform-an-introductory-guide/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>/blog/implementing-shift-left-for-terraform-an-introductory-guide/</guid>
      <description>Introduction In today&amp;rsquo;s fast-paced development environment, ensuring the security and quality of your infrastructure as code (IaC) is crucial. When I mentioned implementing Shift Left for Terraform to a few colleagues, many responded with, &amp;ldquo;Say what?&amp;rdquo; The concept of shifting security and quality checks to the earlier stages of the development lifecycle is still new to some. So, let&amp;rsquo;s dive into what Shift Left for Terraform means and explore a practical approach to implementing it.</description>
    </item>
    
    <item>
      <title>Introducing the PowerShell GitLab Utility Module</title>
      <link>/blog/introducing-the-powershell-gitlab-utility-module/</link>
      <pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>/blog/introducing-the-powershell-gitlab-utility-module/</guid>
      <description>Introduction Harnessing GitLab with PowerShell: Introducing the PowerShell.GitLab.Utility Module
In the evolving landscape of DevOps and CI/CD, automating and streamlining operations is invaluable. GitLab, a web-based DevOps lifecycle tool, provides a comprehensive platform for software development, from project planning and source code management to CI/CD, monitoring, and security. To enhance the interaction with GitLab through automation, the PowerShell.GitLab.Utility modules have emerged as a significant advancement.
What is PowerShell.GitLab.Utility? PowerShell.GitLab.Utility is a PowerShell module designed to interface with GitLab.</description>
    </item>
    
    <item>
      <title>Using the GitLab GraphQL API in PowerShell</title>
      <link>/blog/using-the-gitlab-graphql-api-in-powershell/</link>
      <pubDate>Sat, 14 Oct 2023 11:20:02 +0100</pubDate>
      
      <guid>/blog/using-the-gitlab-graphql-api-in-powershell/</guid>
      <description>Introduction GraphQL is a revolutionary query language and runtime for API interactions in web development. It doesn&amp;rsquo;t just transform how we request and manage data—it reshapes the entire API landscape. In this blog post, we&amp;rsquo;ll unveil the power of GitLab GraphQL API, exploring how it offers a comprehensive and user-friendly approach to data manipulation and API evolution.
At its core, GraphQL serves as a versatile tool for querying APIs and orchestrating data retrieval.</description>
    </item>
    
    <item>
      <title>GitLab Custom SAST Analyzer for PowerShell Project</title>
      <link>/blog/gitlab-custom-sast-analyzer-for-powershell-project/</link>
      <pubDate>Thu, 14 Sep 2023 07:56:42 +0100</pubDate>
      
      <guid>/blog/gitlab-custom-sast-analyzer-for-powershell-project/</guid>
      <description>Introduction In the ever-evolving landscape of infrastructure as code, software development and cybersecurity, ensuring the robust security of your codebase has become paramount. My journey into enhancing the security posture of my PowerShell projects led me to explore the world of GitLab Custom SAST Analyzers.
As a GitLab Security Specialist, I was well-versed in the importance of securing code repositories and the pivotal role that Static Application Security Testing (SAST) plays in this endeavour.</description>
    </item>
    
    <item>
      <title>Dapr state store demonstration using Minikube with a PowerShell app</title>
      <link>/blog/dapr-state-store-demonstration-using-minikube-with-a-powershell-app/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/dapr-state-store-demonstration-using-minikube-with-a-powershell-app/</guid>
      <description>Introduction This blog post is a part of the feature I added to my web app built using PowerShell. I couldn’t hold the excitement. So, the share is not a minimum viable product but an idea to show a case running a Dapr as a sidecar in a pod. In my last blog post, I shared my understanding of Dockerizing full-stack application(s) built using PowerShell and ran using Docker-Compose and then over a Minikube.</description>
    </item>
    
    <item>
      <title>Dockerize the Full-Stack application built using PowerShell (Pode &amp; PSHTML)</title>
      <link>/blog/dockerize-the-full-stack-application-built-using-powershellpode-pshml/</link>
      <pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/dockerize-the-full-stack-application-built-using-powershellpode-pshml/</guid>
      <description>Introduction I have recorded the demonstration of spinning up the full-stack application built using PowerShell (Pode &amp;amp; PSHTML). Feel free to leave your comments
Disclaimer This blog post is the output of my learning on Docker, MySQL, docker-compose, and MiniKube. So, please skip asking why not native or alternatives?. I am sharing it as a blog because of the ask that I have seen it in the REDDIT. I am an automation engineer with a decent experience in the cloud, not a software developer.</description>
    </item>
    
    <item>
      <title>Deploying Azure Functions using Blue-Green Deployment Model</title>
      <link>/blog/azure-function-app-swap-slot/</link>
      <pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/azure-function-app-swap-slot/</guid>
      <description>Introduction In my previous blog post, I shared the steps that walk you through the basic concepts to deploy Azure Functions with GitLab CICD, and now it’s a good time to demonstrate the swap slot that helps you to plan for the simple blue-green deployment model.
What is Blue-Green deployment model? A blue/green deployment is a strategy in which you create two separate but identical environments. One environment (blue) runs the current application version, and another (green) runs the new version.</description>
    </item>
    
  </channel>
</rss>
